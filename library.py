##두 쌍을 리스트로 배열에 push

# for _ in range(n):
#     tempList=[int(x) for x in input().split()] ########입력받는 방식
#     data.append(tempList)


####리스트와 문자열
#print(' '.join(list))
#리스트 -> 문자열
#"".join(lsit)
#.isalpha()
#.isdigit()
#.find('문자열')

#####문자열 하나씩 잘라서  리스트에 저장하기
# n=int(input())
# graph=[]
# for _ in range(n):
#     graph.append(list(map(int,input().rstrip())))
#

#y,x=index//3,index%3            #1차원을 2차원 좌표로 변환하기

#1차원 -> 2차원


# def make_2_dimen(string):
#     ret=[]
#     ret.append(list(string[0:3]))
#     ret.append(list(string[3:6]))
#     ret.append(list(string[6:9]))
#     return ret




#############################사전 (dict)#############################
#############################사전 (dict)#############################
#############################사전 (dict)#############################
#############################사전 (dict)#############################
# data=dict()
# data['사과']  =123
#
# #key 만 존재하는 리스트
# key_list=data.keys()
#
# #value만 존재하는 리스트
# key_value=data.values()
#
# #각 키에 따른 값 하나씩 출력
# for key in key_list :
#     print(data[key])

#############################집합 (set)====> 사전과 달리 key 값이 없음##########################
#############################집합 (set)====> 사전과 달리 key 값이 없음##########################
#############################집합 (set)====> 사전과 달리 key 값이 없음##########################
#############################집합 (set)====> 사전과 달리 key 값이 없음##########################
#집합 자료형 초기화 방법1
# data=set([1,2,3,4,5])

# #집합 자료형 초기화 방법 2
# data={1,2,3,4,5}
#
#관련 연산
# print(a|b) 합집합
# print(a&b) 교집합
# print(a-b) 차집합
# #관련 함수
# #1. 새로운 원소 추가
# data.add(10) ===============> 시간복잡도 O(1)
# #2. 새로운 원소 여러개 추가
# data.update([10,11])
# #3. 특정한 값 갖는 원소 삭제
# data.remove(4) ==============>시간복잡도 O(1)



###########################################조건문#####################################
###########################################조건문#####################################
###########################################조건문#####################################
###########################################조건문#####################################
##기타 연산자
# 1. x in 리스트 ==> 들어 있을 경우 참 반환
# 2. x not in 리스트 ==> 들어있지 않을 경우 참 반환

## 간략한 if문 표현식
# score=85
# result= "success" if score >=80 else "fail"

## 리스트& if 문
##result= sum([x-some for x in 리스트 if x-some>0])
##result= [i for i in 리스트 if i not in removeSet]

#########################################함수########################################
#########################################함수########################################
#########################################함수########################################
#########################################함수########################################
#########################################함수########################################
#람다식

# #기존
# def add(a,b):
#     return a+b
#
# print(add(3+7))
# #람다
# print((lambda a,b:a+b)(3,7))

#########################################입출력########################################3
#########################################입출력########################################3
#########################################입출력########################################3
#########################################입출력########################################3
#기본
# n=input()

#두 개 이상 정수로
# m,n=map(int,input().split())

#각 데이터를 공백으로 구분하여 입력
# data=list(map(int,input().split()))

#한 문자열을 각각 입력
# string= list(input())
# print(string)

#sys readline
# import sys
# input=sys.stdin.readline
# input().rstrip() 으로 사용할 것==>안해주면 '\n'이 같이 나옴


########################################내장함수######################################
########################################내장함수######################################
########################################내장함수######################################
########################################내장함수######################################

#sum,max,min

#eval함수==> 문자열 수식이 들어올 경우 수식을 계산함
# result=eval("4+7*6")

#sorted 함수
#000=sorted(리스트)
#000=sorted(리스트,reverse=True)
#OOO=sorted(OOO, key=lambda x: x[0],reverse=True)
#OOO=sorted(OOO, key=lambda x: (x[0],x[1],x[2]),reverse=True)
#OOO=sorted(OOO, key=lambda x: (-x[0],-x[1],x[2])) =====>내림,내림, 오름 차수



########################################itertools########################################
########################################itertools########################################
########################################itertools########################################
########################################itertools########################################
# from itertools import permutations,combinations
#permutation= 순열, combinations= 조합
#예시
# list(permutations(data,3))
# for i in list(permutations(리스트,3))

# 중복순열 중복 조합
# product, combinations_with_replacement
# for i in list(product(리스트,3))

###########################################heapq##########################################
###########################################heapq##########################################
###########################################heapq##########################################
###########################################heapq##########################################

#사용법
# import heapq #=========================>O(nlogN)==========>기본적으로 최소힙으로 구현되어있음
# q=[]
# heapq.heappush(q,value)
# heapq.heappop(q)

#최대힙
#idea heappush할 때 -를 붙여서 넣어주고 꺼낸후 - 붙여서 결과로 씀
# heapq.heappush(q,-value)


#############################################bisect#############################################
#############################################bisect#############################################
#############################################bisect#############################################
#############################################bisect#############################################
##사용법
# from bisect import bisect_left,bisect_right
# a=[1,2,3,4,4,4,4,5]
# x=4
#
# print(bisect_left(a,4))
# print(bisect_right(a,4))
#
#
# #응용함수
# def count_by_range(data,left,right):
#     return bisect_right(data,right)-bisect_left(data,left)

# print(count_by_range(a,-1,3))

########################################collections##################################
########################################collections##################################
########################################collections##################################
########################################collections##################################
#deque, Counter
#deque 의 경우 앞 뒤 요소 추가 및 제거에 있어 O(1)을 갖음. 리스트는 O(n)
#deque을 통해 queue 및 stack으로 사용
# from collections import deque
#
# q=deque()
# q=deque([1,2,3])
# q.append(5)
# q.popleft()
# data=list(q) #######리스트로 변환
# print(data)
#
# #####Counter-->등장횟수를 세는 기능 제공
# ######리스트가 주어졌을 때 내부 원소가 몇번 등장했는지 알려줌
# from collections import Counter
# count=Counter([1,1,1,1,2,2,3,3,3])
# print(count[1])
# print(count[2])
# print(count[3])
# print(list(count.keys()))
# print(list(count.values()))
# print(dict(count)) #############사전형으로 변환
# print(list(count))

#####################################math###################################
#####################################math###################################
#####################################math###################################
#####################################math###################################
# import math
# #팩토리얼
# print(math.factorial(5))
#
# #제곱근 ====>float형 리턴됨
# print(int(math.sqrt(16)))
#
# #최대공약수
# print(math.gcd(21,14))
#
# #파이, 자연상수
# print(math.pi)
# print(math.e)